# coding: utf-8

"""
    Oxford Dictionaries

    Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

    The version of the OpenAPI document: 1.11.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from oxford_dictionaries_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from oxford_dictionaries_python_sdk.api_response import AsyncGeneratorResponse
from oxford_dictionaries_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oxford_dictionaries_python_sdk import schemas  # noqa: F401

from oxford_dictionaries_python_sdk.model.ngrams_result import NgramsResult as NgramsResultSchema

from oxford_dictionaries_python_sdk.type.ngrams_result import NgramsResult

from ...api_client import Dictionary
from oxford_dictionaries_python_sdk.pydantic.ngrams_result import NgramsResult as NgramsResultPydantic

from . import path

# Query params
TokensSchema = schemas.StrSchema
ContainsSchema = schemas.StrSchema
PunctuationSchema = schemas.StrSchema
FormatSchema = schemas.StrSchema
MinFrequencySchema = schemas.Int64Schema
MaxFrequencySchema = schemas.Int64Schema
MinDocumentFrequencySchema = schemas.Int64Schema
MaxDocumentFrequencySchema = schemas.Int64Schema
CollateSchema = schemas.StrSchema
SortSchema = schemas.StrSchema
OffsetSchema = schemas.Int64Schema
LimitSchema = schemas.Int64Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'tokens': typing.Union[TokensSchema, str, ],
        'contains': typing.Union[ContainsSchema, str, ],
        'punctuation': typing.Union[PunctuationSchema, str, ],
        'format': typing.Union[FormatSchema, str, ],
        'minFrequency': typing.Union[MinFrequencySchema, decimal.Decimal, int, ],
        'maxFrequency': typing.Union[MaxFrequencySchema, decimal.Decimal, int, ],
        'minDocumentFrequency': typing.Union[MinDocumentFrequencySchema, decimal.Decimal, int, ],
        'maxDocumentFrequency': typing.Union[MaxDocumentFrequencySchema, decimal.Decimal, int, ],
        'collate': typing.Union[CollateSchema, str, ],
        'sort': typing.Union[SortSchema, str, ],
        'offset': typing.Union[OffsetSchema, decimal.Decimal, int, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_tokens = api_client.QueryParameter(
    name="tokens",
    style=api_client.ParameterStyle.FORM,
    schema=TokensSchema,
    explode=True,
)
request_query_contains = api_client.QueryParameter(
    name="contains",
    style=api_client.ParameterStyle.FORM,
    schema=ContainsSchema,
    explode=True,
)
request_query_punctuation = api_client.QueryParameter(
    name="punctuation",
    style=api_client.ParameterStyle.FORM,
    schema=PunctuationSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_min_frequency = api_client.QueryParameter(
    name="minFrequency",
    style=api_client.ParameterStyle.FORM,
    schema=MinFrequencySchema,
    explode=True,
)
request_query_max_frequency = api_client.QueryParameter(
    name="maxFrequency",
    style=api_client.ParameterStyle.FORM,
    schema=MaxFrequencySchema,
    explode=True,
)
request_query_min_document_frequency = api_client.QueryParameter(
    name="minDocumentFrequency",
    style=api_client.ParameterStyle.FORM,
    schema=MinDocumentFrequencySchema,
    explode=True,
)
request_query_max_document_frequency = api_client.QueryParameter(
    name="maxDocumentFrequency",
    style=api_client.ParameterStyle.FORM,
    schema=MaxDocumentFrequencySchema,
    explode=True,
)
request_query_collate = api_client.QueryParameter(
    name="collate",
    style=api_client.ParameterStyle.FORM,
    schema=CollateSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_offset = api_client.QueryParameter(
    name="offset",
    style=api_client.ParameterStyle.FORM,
    schema=OffsetSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
# Path params
SourceLangSchema = schemas.StrSchema
CorpusSchema = schemas.StrSchema
NgramSizeSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'source_lang': typing.Union[SourceLangSchema, str, ],
        'corpus': typing.Union[CorpusSchema, str, ],
        'ngram-size': typing.Union[NgramSizeSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_source_lang = api_client.PathParameter(
    name="source_lang",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SourceLangSchema,
    required=True,
)
request_path_corpus = api_client.PathParameter(
    name="corpus",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CorpusSchema,
    required=True,
)
request_path_ngram_size = api_client.PathParameter(
    name="ngram-size",
    style=api_client.ParameterStyle.SIMPLE,
    schema=NgramSizeSchema,
    required=True,
)
_auth = [
    'appId',
    'appKey',
]
SchemaFor200ResponseBodyApplicationJson = NgramsResultSchema
SchemaFor200ResponseBodyTextCsv = NgramsResultSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: NgramsResult


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: NgramsResult


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '404': _response_for_404,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
    'text/csv',
)


class BaseApi(api_client.Api):

    def _get_ngram_frequencies_mapped_args(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if tokens is not None:
            _query_params["tokens"] = tokens
        if contains is not None:
            _query_params["contains"] = contains
        if punctuation is not None:
            _query_params["punctuation"] = punctuation
        if format is not None:
            _query_params["format"] = format
        if min_frequency is not None:
            _query_params["minFrequency"] = min_frequency
        if max_frequency is not None:
            _query_params["maxFrequency"] = max_frequency
        if min_document_frequency is not None:
            _query_params["minDocumentFrequency"] = min_document_frequency
        if max_document_frequency is not None:
            _query_params["maxDocumentFrequency"] = max_document_frequency
        if collate is not None:
            _query_params["collate"] = collate
        if sort is not None:
            _query_params["sort"] = sort
        if offset is not None:
            _query_params["offset"] = offset
        if limit is not None:
            _query_params["limit"] = limit
        if source_lang is not None:
            _path_params["source_lang"] = source_lang
        if corpus is not None:
            _path_params["corpus"] = corpus
        if ngram_size is not None:
            _path_params["ngram-size"] = ngram_size
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aget_ngram_frequencies_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Retrieve the frequency of ngrams (1-4) derived from a corpus
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_source_lang,
            request_path_corpus,
            request_path_ngram_size,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_tokens,
            request_query_contains,
            request_query_punctuation,
            request_query_format,
            request_query_min_frequency,
            request_query_max_frequency,
            request_query_min_document_frequency,
            request_query_max_document_frequency,
            request_query_collate,
            request_query_sort,
            request_query_offset,
            request_query_limit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/stats/frequency/ngrams/{source_lang}/{corpus}/{ngram-size}',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_ngram_frequencies_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Retrieve the frequency of ngrams (1-4) derived from a corpus
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_source_lang,
            request_path_corpus,
            request_path_ngram_size,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_tokens,
            request_query_contains,
            request_query_punctuation,
            request_query_format,
            request_query_min_frequency,
            request_query_max_frequency,
            request_query_min_document_frequency,
            request_query_max_document_frequency,
            request_query_collate,
            request_query_sort,
            request_query_offset,
            request_query_limit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/stats/frequency/ngrams/{source_lang}/{corpus}/{ngram-size}',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetNgramFrequenciesRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_ngram_frequencies(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_ngram_frequencies_mapped_args(
            source_lang=source_lang,
            corpus=corpus,
            ngram_size=ngram_size,
            tokens=tokens,
            contains=contains,
            punctuation=punctuation,
            format=format,
            min_frequency=min_frequency,
            max_frequency=max_frequency,
            min_document_frequency=min_document_frequency,
            max_document_frequency=max_document_frequency,
            collate=collate,
            sort=sort,
            offset=offset,
            limit=limit,
        )
        return await self._aget_ngram_frequencies_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get_ngram_frequencies(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_ngram_frequencies_mapped_args(
            source_lang=source_lang,
            corpus=corpus,
            ngram_size=ngram_size,
            tokens=tokens,
            contains=contains,
            punctuation=punctuation,
            format=format,
            min_frequency=min_frequency,
            max_frequency=max_frequency,
            min_document_frequency=min_document_frequency,
            max_document_frequency=max_document_frequency,
            collate=collate,
            sort=sort,
            offset=offset,
            limit=limit,
        )
        return self._get_ngram_frequencies_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class GetNgramFrequencies(BaseApi):

    async def aget_ngram_frequencies(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> NgramsResultPydantic:
        raw_response = await self.raw.aget_ngram_frequencies(
            source_lang=source_lang,
            corpus=corpus,
            ngram_size=ngram_size,
            tokens=tokens,
            contains=contains,
            punctuation=punctuation,
            format=format,
            min_frequency=min_frequency,
            max_frequency=max_frequency,
            min_document_frequency=min_document_frequency,
            max_document_frequency=max_document_frequency,
            collate=collate,
            sort=sort,
            offset=offset,
            limit=limit,
            **kwargs,
        )
        if validate:
            return NgramsResultPydantic(**raw_response.body)
        return api_client.construct_model_instance(NgramsResultPydantic, raw_response.body)
    
    
    def get_ngram_frequencies(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        validate: bool = False,
    ) -> NgramsResultPydantic:
        raw_response = self.raw.get_ngram_frequencies(
            source_lang=source_lang,
            corpus=corpus,
            ngram_size=ngram_size,
            tokens=tokens,
            contains=contains,
            punctuation=punctuation,
            format=format,
            min_frequency=min_frequency,
            max_frequency=max_frequency,
            min_document_frequency=min_document_frequency,
            max_document_frequency=max_document_frequency,
            collate=collate,
            sort=sort,
            offset=offset,
            limit=limit,
        )
        if validate:
            return NgramsResultPydantic(**raw_response.body)
        return api_client.construct_model_instance(NgramsResultPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_ngram_frequencies_mapped_args(
            source_lang=source_lang,
            corpus=corpus,
            ngram_size=ngram_size,
            tokens=tokens,
            contains=contains,
            punctuation=punctuation,
            format=format,
            min_frequency=min_frequency,
            max_frequency=max_frequency,
            min_document_frequency=min_document_frequency,
            max_document_frequency=max_document_frequency,
            collate=collate,
            sort=sort,
            offset=offset,
            limit=limit,
        )
        return await self._aget_ngram_frequencies_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        source_lang: str,
        corpus: str,
        ngram_size: str,
        tokens: typing.Optional[str] = None,
        contains: typing.Optional[str] = None,
        punctuation: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        min_frequency: typing.Optional[int] = None,
        max_frequency: typing.Optional[int] = None,
        min_document_frequency: typing.Optional[int] = None,
        max_document_frequency: typing.Optional[int] = None,
        collate: typing.Optional[str] = None,
        sort: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_ngram_frequencies_mapped_args(
            source_lang=source_lang,
            corpus=corpus,
            ngram_size=ngram_size,
            tokens=tokens,
            contains=contains,
            punctuation=punctuation,
            format=format,
            min_frequency=min_frequency,
            max_frequency=max_frequency,
            min_document_frequency=min_document_frequency,
            max_document_frequency=max_document_frequency,
            collate=collate,
            sort=sort,
            offset=offset,
            limit=limit,
        )
        return self._get_ngram_frequencies_oapg(
            query_params=args.query,
            path_params=args.path,
        )

