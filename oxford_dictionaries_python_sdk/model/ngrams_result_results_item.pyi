# coding: utf-8

"""
    Oxford Dictionaries

    Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

    The version of the OpenAPI document: 1.11.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oxford_dictionaries_python_sdk import schemas  # noqa: F401


class NgramsResultResultsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Ngrams matching the given options
    """


    class MetaOapg:
        required = {
            "tokens",
            "frequency",
        }
        
        class properties:
            frequency = schemas.IntSchema
        
            @staticmethod
            def tokens() -> typing.Type['NgramsResultResultsItemTokens']:
                return NgramsResultResultsItemTokens
            __annotations__ = {
                "frequency": frequency,
                "tokens": tokens,
            }
        additional_properties = schemas.AnyTypeSchema
    
    tokens: 'NgramsResultResultsItemTokens'
    frequency: MetaOapg.properties.frequency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokens"]) -> 'NgramsResultResultsItemTokens': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokens"], typing_extensions.Literal["frequency"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokens"]) -> 'NgramsResultResultsItemTokens': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokens"], typing_extensions.Literal["frequency"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tokens: 'NgramsResultResultsItemTokens',
        frequency: typing.Union[MetaOapg.properties.frequency, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'NgramsResultResultsItem':
        return super().__new__(
            cls,
            *args,
            tokens=tokens,
            frequency=frequency,
            _configuration=_configuration,
            **kwargs,
        )

from oxford_dictionaries_python_sdk.model.ngrams_result_results_item_tokens import NgramsResultResultsItemTokens
