# coding: utf-8

"""
    Oxford Dictionaries

    Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

    The version of the OpenAPI document: 1.11.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oxford_dictionaries_python_sdk import schemas  # noqa: F401


class ThesaurusLink(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Link to a sense of a specific entry in the thesaurus Dictionary
    """


    class MetaOapg:
        required = {
            "sense_id",
            "entry_id",
        }
        
        class properties:
            entry_id = schemas.StrSchema
            sense_id = schemas.StrSchema
            __annotations__ = {
                "entry_id": entry_id,
                "sense_id": sense_id,
            }
    
    sense_id: MetaOapg.properties.sense_id
    entry_id: MetaOapg.properties.entry_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entry_id"]) -> MetaOapg.properties.entry_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sense_id"]) -> MetaOapg.properties.sense_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entry_id", "sense_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entry_id"]) -> MetaOapg.properties.entry_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sense_id"]) -> MetaOapg.properties.sense_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entry_id", "sense_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sense_id: typing.Union[MetaOapg.properties.sense_id, str, ],
        entry_id: typing.Union[MetaOapg.properties.entry_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThesaurusLink':
        return super().__new__(
            cls,
            *args,
            sense_id=sense_id,
            entry_id=entry_id,
            _configuration=_configuration,
            **kwargs,
        )
