# coding: utf-8

"""
    Oxford Dictionaries

    Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

    The version of the OpenAPI document: 1.11.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oxford_dictionaries_python_sdk import schemas  # noqa: F401


class Filters(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for the Filters endpoint.
    """


    class MetaOapg:
        
        class properties:
            metadata = schemas.DictSchema
            
            
            class results(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def entries() -> typing.Type['Arrayofstrings']:
                            return Arrayofstrings
                    
                        @staticmethod
                        def inflections() -> typing.Type['Arrayofstrings']:
                            return Arrayofstrings
                    
                        @staticmethod
                        def translations() -> typing.Type['Arrayofstrings']:
                            return Arrayofstrings
                    
                        @staticmethod
                        def wordlist() -> typing.Type['Arrayofstrings']:
                            return Arrayofstrings
                        __annotations__ = {
                            "entries": entries,
                            "inflections": inflections,
                            "translations": translations,
                            "wordlist": wordlist,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["entries"]) -> 'Arrayofstrings': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["inflections"]) -> 'Arrayofstrings': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["translations"]) -> 'Arrayofstrings': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["wordlist"]) -> 'Arrayofstrings': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["entries", "inflections", "translations", "wordlist", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["inflections"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["translations"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["wordlist"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entries", "inflections", "translations", "wordlist", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    entries: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
                    inflections: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
                    translations: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
                    wordlist: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'results':
                    return super().__new__(
                        cls,
                        *args,
                        entries=entries,
                        inflections=inflections,
                        translations=translations,
                        wordlist=wordlist,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "metadata": metadata,
                "results": results,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metadata", "results", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> typing.Union[MetaOapg.properties.results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metadata", "results", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        results: typing.Union[MetaOapg.properties.results, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Filters':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            results=results,
            _configuration=_configuration,
            **kwargs,
        )

from oxford_dictionaries_python_sdk.model.arrayofstrings import Arrayofstrings
