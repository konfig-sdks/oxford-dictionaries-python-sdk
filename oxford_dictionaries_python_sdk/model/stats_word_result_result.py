# coding: utf-8

"""
    Oxford Dictionaries

    Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

    The version of the OpenAPI document: 1.11.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oxford_dictionaries_python_sdk import schemas  # noqa: F401


class StatsWordResultResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Frequency information for a given entity
    """


    class MetaOapg:
        required = {
            "normalizedFrequency",
            "matchCount",
            "frequency",
        }
        
        class properties:
            frequency = schemas.IntSchema
            matchCount = schemas.IntSchema
            normalizedFrequency = schemas.IntSchema
            lemma = schemas.StrSchema
            lexicalCategory = schemas.StrSchema
            trueCase = schemas.StrSchema
            wordform = schemas.StrSchema
            __annotations__ = {
                "frequency": frequency,
                "matchCount": matchCount,
                "normalizedFrequency": normalizedFrequency,
                "lemma": lemma,
                "lexicalCategory": lexicalCategory,
                "trueCase": trueCase,
                "wordform": wordform,
            }
        additional_properties = schemas.AnyTypeSchema
    
    normalizedFrequency: MetaOapg.properties.normalizedFrequency
    matchCount: MetaOapg.properties.matchCount
    frequency: MetaOapg.properties.frequency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedFrequency"]) -> MetaOapg.properties.normalizedFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchCount"]) -> MetaOapg.properties.matchCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lemma"]) -> MetaOapg.properties.lemma: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lexicalCategory"]) -> MetaOapg.properties.lexicalCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trueCase"]) -> MetaOapg.properties.trueCase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wordform"]) -> MetaOapg.properties.wordform: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["normalizedFrequency"], typing_extensions.Literal["matchCount"], typing_extensions.Literal["frequency"], typing_extensions.Literal["lemma"], typing_extensions.Literal["lexicalCategory"], typing_extensions.Literal["trueCase"], typing_extensions.Literal["wordform"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedFrequency"]) -> MetaOapg.properties.normalizedFrequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchCount"]) -> MetaOapg.properties.matchCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lemma"]) -> typing.Union[MetaOapg.properties.lemma, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lexicalCategory"]) -> typing.Union[MetaOapg.properties.lexicalCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trueCase"]) -> typing.Union[MetaOapg.properties.trueCase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wordform"]) -> typing.Union[MetaOapg.properties.wordform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["normalizedFrequency"], typing_extensions.Literal["matchCount"], typing_extensions.Literal["frequency"], typing_extensions.Literal["lemma"], typing_extensions.Literal["lexicalCategory"], typing_extensions.Literal["trueCase"], typing_extensions.Literal["wordform"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        normalizedFrequency: typing.Union[MetaOapg.properties.normalizedFrequency, decimal.Decimal, int, ],
        matchCount: typing.Union[MetaOapg.properties.matchCount, decimal.Decimal, int, ],
        frequency: typing.Union[MetaOapg.properties.frequency, decimal.Decimal, int, ],
        lemma: typing.Union[MetaOapg.properties.lemma, str, schemas.Unset] = schemas.unset,
        lexicalCategory: typing.Union[MetaOapg.properties.lexicalCategory, str, schemas.Unset] = schemas.unset,
        trueCase: typing.Union[MetaOapg.properties.trueCase, str, schemas.Unset] = schemas.unset,
        wordform: typing.Union[MetaOapg.properties.wordform, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StatsWordResultResult':
        return super().__new__(
            cls,
            *args,
            normalizedFrequency=normalizedFrequency,
            matchCount=matchCount,
            frequency=frequency,
            lemma=lemma,
            lexicalCategory=lexicalCategory,
            trueCase=trueCase,
            wordform=wordform,
            _configuration=_configuration,
            **kwargs,
        )
