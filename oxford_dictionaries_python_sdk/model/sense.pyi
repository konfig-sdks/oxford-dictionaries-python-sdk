# coding: utf-8

"""
    Oxford Dictionaries

    Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

    The version of the OpenAPI document: 1.11.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oxford_dictionaries_python_sdk import schemas  # noqa: F401


class Sense(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def crossReferenceMarkers() -> typing.Type['Arrayofstrings']:
                return Arrayofstrings
        
            @staticmethod
            def crossReferences() -> typing.Type['CrossReferencesList']:
                return CrossReferencesList
        
            @staticmethod
            def definitions() -> typing.Type['Arrayofstrings']:
                return Arrayofstrings
        
            @staticmethod
            def domains() -> typing.Type['Arrayofstrings']:
                return Arrayofstrings
        
            @staticmethod
            def examples() -> typing.Type['ExamplesList']:
                return ExamplesList
            id = schemas.StrSchema
        
            @staticmethod
            def notes() -> typing.Type['CategorizedTextList']:
                return CategorizedTextList
        
            @staticmethod
            def pronunciations() -> typing.Type['PronunciationsList']:
                return PronunciationsList
        
            @staticmethod
            def regions() -> typing.Type['Arrayofstrings']:
                return Arrayofstrings
        
            @staticmethod
            def registers() -> typing.Type['Arrayofstrings']:
                return Arrayofstrings
        
            @staticmethod
            def short_definitions() -> typing.Type['Arrayofstrings']:
                return Arrayofstrings
            
            
            class subsenses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Sense']:
                        return Sense
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Sense'], typing.List['Sense']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subsenses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Sense':
                    return super().__getitem__(i)
            
            
            class thesaurusLinks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ThesaurusLink']:
                        return ThesaurusLink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ThesaurusLink'], typing.List['ThesaurusLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thesaurusLinks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ThesaurusLink':
                    return super().__getitem__(i)
        
            @staticmethod
            def translations() -> typing.Type['TranslationsList']:
                return TranslationsList
        
            @staticmethod
            def variantForms() -> typing.Type['VariantFormsList']:
                return VariantFormsList
            __annotations__ = {
                "crossReferenceMarkers": crossReferenceMarkers,
                "crossReferences": crossReferences,
                "definitions": definitions,
                "domains": domains,
                "examples": examples,
                "id": id,
                "notes": notes,
                "pronunciations": pronunciations,
                "regions": regions,
                "registers": registers,
                "short_definitions": short_definitions,
                "subsenses": subsenses,
                "thesaurusLinks": thesaurusLinks,
                "translations": translations,
                "variantForms": variantForms,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crossReferenceMarkers"]) -> 'Arrayofstrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crossReferences"]) -> 'CrossReferencesList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definitions"]) -> 'Arrayofstrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domains"]) -> 'Arrayofstrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["examples"]) -> 'ExamplesList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> 'CategorizedTextList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pronunciations"]) -> 'PronunciationsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regions"]) -> 'Arrayofstrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registers"]) -> 'Arrayofstrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_definitions"]) -> 'Arrayofstrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subsenses"]) -> MetaOapg.properties.subsenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thesaurusLinks"]) -> MetaOapg.properties.thesaurusLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translations"]) -> 'TranslationsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variantForms"]) -> 'VariantFormsList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["crossReferenceMarkers", "crossReferences", "definitions", "domains", "examples", "id", "notes", "pronunciations", "regions", "registers", "short_definitions", "subsenses", "thesaurusLinks", "translations", "variantForms", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crossReferenceMarkers"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crossReferences"]) -> typing.Union['CrossReferencesList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definitions"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["examples"]) -> typing.Union['ExamplesList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union['CategorizedTextList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pronunciations"]) -> typing.Union['PronunciationsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regions"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registers"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_definitions"]) -> typing.Union['Arrayofstrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subsenses"]) -> typing.Union[MetaOapg.properties.subsenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thesaurusLinks"]) -> typing.Union[MetaOapg.properties.thesaurusLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translations"]) -> typing.Union['TranslationsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variantForms"]) -> typing.Union['VariantFormsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["crossReferenceMarkers", "crossReferences", "definitions", "domains", "examples", "id", "notes", "pronunciations", "regions", "registers", "short_definitions", "subsenses", "thesaurusLinks", "translations", "variantForms", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        crossReferenceMarkers: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
        crossReferences: typing.Union['CrossReferencesList', schemas.Unset] = schemas.unset,
        definitions: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
        domains: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
        examples: typing.Union['ExamplesList', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        notes: typing.Union['CategorizedTextList', schemas.Unset] = schemas.unset,
        pronunciations: typing.Union['PronunciationsList', schemas.Unset] = schemas.unset,
        regions: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
        registers: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
        short_definitions: typing.Union['Arrayofstrings', schemas.Unset] = schemas.unset,
        subsenses: typing.Union[MetaOapg.properties.subsenses, list, tuple, schemas.Unset] = schemas.unset,
        thesaurusLinks: typing.Union[MetaOapg.properties.thesaurusLinks, list, tuple, schemas.Unset] = schemas.unset,
        translations: typing.Union['TranslationsList', schemas.Unset] = schemas.unset,
        variantForms: typing.Union['VariantFormsList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Sense':
        return super().__new__(
            cls,
            *args,
            crossReferenceMarkers=crossReferenceMarkers,
            crossReferences=crossReferences,
            definitions=definitions,
            domains=domains,
            examples=examples,
            id=id,
            notes=notes,
            pronunciations=pronunciations,
            regions=regions,
            registers=registers,
            short_definitions=short_definitions,
            subsenses=subsenses,
            thesaurusLinks=thesaurusLinks,
            translations=translations,
            variantForms=variantForms,
            _configuration=_configuration,
            **kwargs,
        )

from oxford_dictionaries_python_sdk.model.arrayofstrings import Arrayofstrings
from oxford_dictionaries_python_sdk.model.categorized_text_list import CategorizedTextList
from oxford_dictionaries_python_sdk.model.cross_references_list import CrossReferencesList
from oxford_dictionaries_python_sdk.model.examples_list import ExamplesList
from oxford_dictionaries_python_sdk.model.pronunciations_list import PronunciationsList
from oxford_dictionaries_python_sdk.model.thesaurus_link import ThesaurusLink
from oxford_dictionaries_python_sdk.model.translations_list import TranslationsList
from oxford_dictionaries_python_sdk.model.variant_forms_list import VariantFormsList
